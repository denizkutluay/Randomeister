<< KnotTheory`;

MyPD = PD[X[6, 2, 7, 1], X[2, 6, 3, 5], X[4, 7, 5, 8], X[8, 3, 1, 4]];
ThistlethwaiteUnknot := 
  PD[X[22, 2, 23, 1], X[3, 27, 4, 26], X[5, 21, 6, 20], 
   X[7, 18, 8, 19], X[9, 25, 10, 24], X[11, 2, 12, 3], 
   X[4, 13, 5, 14], X[15, 6, 16, 7], X[30, 17, 1, 18], 
   X[19, 14, 20, 15], X[28, 22, 29, 21], X[23, 11, 24, 10], 
   X[25, 9, 26, 8], X[27, 12, 28, 13], X[16, 29, 17, 30]];
OchiaiUnknot := 
  PD[X[12, 2, 13, 1], X[3, 6, 4, 7], X[5, 24, 6, 25], X[7, 15, 8, 14],
    X[16, 10, 17, 9], X[26, 12, 1, 11], X[13, 20, 14, 21], 
   X[22, 15, 23, 16], X[10, 18, 11, 17], X[19, 3, 20, 2], 
   X[21, 8, 22, 9], X[23, 4, 24, 5], X[25, 19, 26, 18]];
Upby2[m_, r_Integer] := If[m > r, m + 2, m];

Downby2[m_, r_Integer] := If[m > r, m - 2, m];

MaxArc[K_PD] := 2*Length[K];

Fig8PDs = {PD[X[1, 1, 2, 2]], PD[X[2, 1, 1, 2]], PD[X[2, 2, 1, 1]], 
   PD[X[1, 2, 2, 1]]};

Fig8Q[K_PD] := MemberQ[Fig8PDs, K];

Fig8SpecialCase[r_Integer] := If[r == 1,
   {X[1, 1, 2, 2] -> X[3, 1, 4, 4], X[2, 1, 1, 2] -> X[4, 3, 1, 4], 
    X[2, 2, 1, 1] -> X[4, 4, 1, 3], X[1, 2, 2, 1] -> X[3, 4, 4, 1]},
   {X[1, 1, 2, 2] -> X[1, 1, 2, 4], X[2, 1, 1, 2] -> X[4, 1, 1, 2], 
    X[2, 2, 1, 1] -> X[4, 2, 1, 1], X[1, 2, 2, 1] -> X[1, 4, 2, 1]}
   ];

R1Type[r_Integer, t_Integer] := 
  Switch[t, 1, X[r + 1, r + 1, r + 2, r], 2, 
   X[r, r + 1, r + 1, r + 2], 3, X[r + 1, r, r + 2, r + 1], 4, 
   X[r, r + 2, r + 1, r + 1]];

Reide1onFig8[K_PD, r_Integer, t_Integer] := Append[
   K /. Fig8SpecialCase[r], R1Type[r, t]
   ];

Reide1plusGeneric[K_PD, r_Integer, t_Integer] := 
  Append[K /. {X[i_, j_, k_, l_] -> 
            X[Upby2[i, r], Upby2[j, r], Upby2[k, r], Upby2[l, r]]}
         /. {X[r, j_, r + 3, l_] -> X[r + 2, j, r + 3, l]}
        /. {X[i_, r, k_, r + 3] -> X[i, r + 2, k, r + 3]}
       /. {X[i_, r + 3, k_, r] -> X[i, r + 3, k, r + 2]}
      /. {X[i_, MaxArc[K], k_, 1] -> X[i, MaxArc[K] + 2, k, 1]}
     /. {X[MaxArc[K], j_, 1, l_] -> X[MaxArc[K] + 2, j, 1, l]}
    /. {X[i_, 1, k_, MaxArc[K]] -> X[i, 1, k, MaxArc[K] + 2]}
   , R1Type[r, t]];

R1p[K_PD, r_Integer, t_Integer] := 
  If[Fig8Q[K], Reide1onFig8[K, r, t], Reide1plusGeneric[K, r, t]];
Reide1minusGeneric[K_PD, r_Integer] := DeleteCases[K, crs_ /; 
     crs == X[r, r, r + 1, r - 1] || crs == X[r - 1, r, r, r + 1] ||
      crs == X[r, r - 1, r + 1, r] || crs == X[r - 1, r + 1, r, r]
    ] /. {X[i_, j_, k_, l_] -> 
     X[Downby2[i, r], Downby2[j, r], Downby2[k, r], Downby2[l, r]]};
Reide1minusOnArc1[K_PD] := DeleteCases[K, crs_ /;
         crs == X[1, 1, 2, MaxArc[K]] || 
          crs == X[MaxArc[K], 1, 1, 2] || 
          crs == X[1, MaxArc[K], 2, 1] || crs == X[MaxArc[K], 2, 1, 1]
        ] /. {X[i_, j_, k_, l_] -> 
         X[i - 1, j - 1, k - 1, l - 1]} /. {X[MaxArc[K] - 1, j_, k_, 
         l_] -> X[1, j, k, l]} /. {X[i_, MaxArc[K] - 1, k_, l_] -> 
       X[i, 1, k, l]} /. {X[i_, j_, MaxArc[K] - 1, l_] -> 
      X[i, j, 1, l]} /. {X[i_, j_, k_, MaxArc[K] - 1] -> 
     X[i, j, k, 1]};
Reide1minusOnMaxArc[K_PD] := DeleteCases[K, crs_ /;
         crs == X[MaxArc[K] - 1, MaxArc[K], MaxArc[K], 1] || 
          crs == X[MaxArc[K], MaxArc[K], 1, MaxArc[K] - 1] || 
          crs == X[MaxArc[K] - 1, 1, MaxArc[K], MaxArc[K]] || 
          crs == X[MaxArc[K], MaxArc[K] - 1, 1, MaxArc[K]]
        ] /. {X[i_, j_, k_, l_] -> X[i, j, k, l]} /. {X[MaxArc[K] - 1,
          j_, k_, l_] -> X[1, j, k, l]} /. {X[i_, MaxArc[K] - 1, k_, 
        l_] -> X[i, 1, k, l]} /. {X[i_, j_, MaxArc[K] - 1, l_] -> 
      X[i, j, 1, l]} /. {X[i_, j_, k_, MaxArc[K] - 1] -> 
     X[i, j, k, 1]};
R1m[K_PD, r_Integer] := 
  If[r != 1 && r != MaxArc[K], Reide1minusGeneric[K, r],
   If[r == 1, Reide1minusOnArc1[K], Reide1minusOnMaxArc[K]]];
HasQ[m_][X[i_, j_, k_, l_]] := 
  If[m == i || m == j || m == k || m == l, True, False];
FindCrossingsWith[K_PD, m_Integer] := Select[K, HasQ[m]];
EdgeReindexing[m_Integer] := If[m > 0, 2 m - 1, -2 m];
Friend[K_PD, a_Integer, b_Integer] := 
  Module[{m = K[[a, b]], l = FindCrossingsWith[K, K[[a, b]]]},
   If[Length[l] == 1,
    {a, If[Position[K[[a]], m][[1, 1]] == b, 
      Position[K[[a]], m][[2, 1]], Position[K[[a]], m][[1, 1]]]},
    If[l[[1]] === K[[a]],
     {Position[K, l[[2]]][[1, 1]], Position[l[[2]], m][[1, 1]]},
     {Position[K, l[[1]]][[1, 1]], Position[l[[1]], m][[1, 1]]}
     ]
    ]
   ];
(*Finds the matching number's coordinates for the number in the a-th \
crossing's b-th entry*)
AddEdge[X[i_, j_, k_, l_], b_Integer] := 
  Module[{m = X[i, j, k, l][[b]]},
   Switch[b, 1, -m, 2, If[l - j == 1 || j - l > 1, -m, m], 3, m, 4, 
    If[l - j == 1 || j - l > 1, m, -m]]
   ];
GetFace[K_PD, a_Integer, b_Integer] := 
  Module[{MyFace = {AddEdge[K[[a]], b]}, n, DummyX = K[[a]], A = a, 
    B = b},
   {A, B} = Friend[K, A, Mod[B + 1, 4, 1]];
   DummyX = K[[A]];
   n = K[[A, B]];
   Join[MyFace,
    Flatten[Reap[
       While[n != K[[a, b]],
        Sow[AddEdge[DummyX, B]];
        {A, B} = Friend[K, A, Mod[B + 1, 4, 1]];
        DummyX = K[[A]];
        n = K[[A, B]];
        ]
       ][[2]]
     ]
    ]
   ];
FindArc[K_PD, m_Integer] :=
  Module[{L = Length[FindCrossingsWith[K, m]], 
    X1 = FindCrossingsWith[K, m][[1]]},
   Switch[L,
    1, {{Position[K, X1][[1, 1]], Position[X1, m][[1, 1]]},
     {Position[K, X1][[1, 1]], Position[X1, m][[2, 1]]}},
    2, {{Position[K, X1][[1, 1]], Position[X1, m][[1, 1]]},
     {Position[K, FindCrossingsWith[K, m][[2]]][[1, 1]], 
      Position[FindCrossingsWith[K, m][[2]], m][[1, 1]]}}
    ]
   ]; (*This command can be replaced by Position[K,m]*)
Fig8Faces[K_PD] := 
  If[K[[1]] === X[1, 1, 2, 2] || 
    K[[1]] === X[2, 1, 1, 2], {{-1}, {1, -2}, {2}}, {{1}, {-1, 
     2}, {-2}}];
Faces[K_PD] := If[Fig8Q[K], Fig8Faces[K],
   Module[{EdgeV = ConstantArray[0, 2*MaxArc[K]], i, Halfway},
     Reap[
      For[i = 1, i <= MaxArc[K], i++,
       Module[{DummyF1 = 
          GetFace[K, FindArc[K, i][[1, 1]], FindArc[K, i][[1, 2]] ],
         DummyF2 = 
          GetFace[K, FindArc[K, i][[2, 1]], FindArc[K, i][[2, 2]] ]},
        If[MemberQ[ EdgeV[[ Map[ EdgeReindexing, DummyF1 ] ]], 1], 
         Goto[Halfway], Sow[DummyF1];
         EdgeV[[Map[ EdgeReindexing, DummyF1 ]]] += 1;
         ];
        Label[Halfway];
        If[MemberQ[ EdgeV[[ Map[ EdgeReindexing, DummyF2 ] ]], 1], 
         Continue[], Sow[DummyF2];
         EdgeV[[Map[ EdgeReindexing, DummyF2 ]]] += 1;
         ];
        ]
       ]
      ]
     ][[2, 1]]
   ];
ExtraXingsType1[a_Integer, b_Integer] := 
  Module[{A = Abs[a], B = Abs[b]},
   Switch[{Sign[a], Sign[b]},
    {1, 1}, 
    PD[X[B + 3, A + 1, B + 4, A], X[B + 2, A + 1, B + 3, A + 2]],
    {1, -1}, 
    PD[X[B + 2, A, B + 3, A + 1], X[B + 3, A + 2, B + 4, A + 1]],
    {-1, 1}, 
    PD[X[B + 3, A + 1, B + 4, A + 2], X[B + 2, A + 1, B + 3, A]],
    {-1, -1}, 
    PD[X[B + 2, A + 2, B + 3, A + 1], X[B + 3, A, B + 4, A + 1]]
    ]
   ];

ExtraXingsType2[a_Integer, b_Integer] := 
  Module[{A = Abs[a], B = Abs[b]},
   Switch[{Sign[a], Sign[b]},
    {1, 1}, 
    PD[X[A, B + 3, A + 1, B + 4], X[A + 1, B + 3, A + 2, B + 2]],
    {1, -1}, 
    PD[X[A, B + 3, A + 1, B + 2], X[A + 1, B + 3, A + 2, B + 4]],
    {-1, 1}, 
    PD[X[A + 1, B + 4, A + 2, B + 3], X[A, B + 2, A + 1, B + 3]],
    {-1, -1}, 
    PD[X[A + 1, B + 2, A + 2, B + 3], X[A, B + 4, A + 1, B + 3]]
    ]
   ];

ExtraXings[a_Integer, b_Integer, t_Integer] := 
  If[t == 2, ExtraXingsType2[a, b], ExtraXingsType1[a, b]];

ReNumberR2p[m_Integer, a_Integer, b_Integer] := 
  If[Abs[b] < m, m + 4, If[Abs[a] <= m <= Abs[b], m + 2, m]];

R2pShifts[K_PD, a_Integer, b_Integer] := 
  Map[Function[x, ReNumberR2p[x, a, b]], K, {2}];

R2pXFixes[K_PD, a_Integer, b_Integer] := 
  Module[{A = Abs[a], B = Abs[b], MaxArc = MaxArc[K]}, K
               /. {X[A - 1, j_, A + 2, l_] -> X[A - 1, j, A, l]}
              /. {X[i_, A - 1, k_, A + 2] -> X[i, A - 1, k, A]}
             /. {X[i_, A + 2, k_, A - 1] -> X[i, A, k, A - 1]}
            /. {X[B + 2, j_, B + 5, l_] -> X[B + 4, j, B + 5, l]}
           /. {X[i_, B + 2, k_, B + 5] -> X[i, B + 4, k, B + 5]}
          /. {X[i_, B + 5, k_, B + 2] -> X[i, B + 5, k, B + 4]}
         /. {X[MaxArc + 2, j_, 1, l_] -> X[MaxArc + 4, j, 1, l]}
        /. {X[i_, MaxArc + 2, k_, 1] -> X[i, MaxArc + 4, k, 1]}
       /. {X[i_, 1, k_, MaxArc + 2] -> X[i, 1, k, MaxArc + 4]}
      /. {X[MaxArc + 4, j_, 3, l_] -> X[MaxArc + 4, j, 1, l]}
     /. {X[i_, MaxArc + 4, k_, 3] -> X[i, MaxArc + 4, k, 1]}
    /. {X[i_, 3, k_, MaxArc + 4] -> X[i, 1, k, MaxArc + 4]}
   ];

R2pGeneric[K_PD, a_Integer, b_Integer, t_Integer] := 
  Join[R2pXFixes[R2pShifts[K, a, b], a, b], ExtraXings[a, b, t]];

Fig8SpecialCaseR2[K_PD, a_Integer, b_Integer] := Switch[K,
   PD[X[1, 1, 2, 2]], 
   Switch[{Abs[a], Abs[b]}, {1, 2}, PD[X[3, 1, 4, 6]], {1, 1}, 
    PD[X[5, 1, 6, 6]], {2, 2}, PD[X[1, 1, 2, 6]]],
   PD[X[2, 1, 1, 2]], 
   Switch[{Abs[a], Abs[b]}, {1, 2}, PD[X[6, 3, 1, 4]], {1, 1}, 
    PD[X[6, 5, 1, 6]], {2, 2}, PD[X[6, 1, 1, 2]]],
   PD[X[2, 2, 1, 1]], 
   Switch[{Abs[a], Abs[b]}, {1, 2}, PD[X[6, 4, 1, 3]], {1, 1}, 
    PD[X[6, 6, 1, 5]], {2, 2}, PD[X[6, 2, 1, 1]]],
   PD[X[1, 2, 2, 1]], 
   Switch[{Abs[a], Abs[b]}, {1, 2}, PD[X[3, 6, 4, 1]], {1, 1}, 
    PD[X[5, 6, 6, 1]], {2, 2}, PD[X[1, 6, 2, 1]]]
   ];

Reide2onFig8[K_PD, a_Integer, b_Integer, t_Integer] := 
  Join[Fig8SpecialCaseR2[K, a, b], R2pGeneric[K, a, b, t][[{2, 3}]]];

R2p[K_PD, a_Integer, b_Integer, t_Integer] := 
  If[Fig8Q[K ], Reide2onFig8[K, a, b, t], R2pGeneric[K, a, b, t]];
ReNumberR2m[m_Integer, a_Integer, b_Integer] := 
  If[b < m, m - 4, If[a < m < b, m - 2, m]];

R2mGeneric[K_PD, a_Integer, b_Integer] := 
  Module[{A = Abs[a], B = Abs[b], MaxArc = MaxArc[K]},
    DeleteCases[K, crs_ /; HasQ[A][crs] || HasQ[B][crs], {1}]
    /. {X[i_, j_, k_, l_] -> 
      X[ReNumberR2m[i, A, B], ReNumberR2m[j, A, B], 
       ReNumberR2m[k, A, B], ReNumberR2m[l, A, B]]}
   ];

ReNumberR2mOnArc1[m_Integer, b_Integer] := 
  If[b < m, m - 3, If[1 < m < b, m - 1, m]];

R2mOnArc1[K_PD, b_Integer] := Module[{B = Abs[b], MaxArc = MaxArc[K]},
    DeleteCases[K, crs_ /; HasQ[1][crs] || HasQ[B][crs], {1}]
        /. {X[i_, j_, k_, l_] -> 
          X[ReNumberR2mOnArc1[i, B], ReNumberR2mOnArc1[j, B], 
           ReNumberR2mOnArc1[k, B], ReNumberR2mOnArc1[l, B]]}
       /. {X[MaxArc - 3, j_, k_, l_] -> X[1, j, k, l]}
      /. {X[i_, MaxArc - 3, k_, l_] -> X[i, 1, k, l]}
     /. {X[i_, j_, MaxArc - 3, l_] -> X[i, j, 1, l]}
    /. {X[i_, j_, k_, MaxArc - 3] -> X[i, j, k, 1]}
   ];

R2mOnMaxArc[K_PD, a_Integer] := 
  Module[{A = Abs[a], MaxArc = MaxArc[K]},
    DeleteCases[K, crs_ /; HasQ[A][crs] || HasQ[MaxArc][crs], {1}]
        /. {X[i_, j_, k_, l_] -> 
          X[ReNumberR2m[i, A, MaxArc], ReNumberR2m[j, A, MaxArc], 
           ReNumberR2m[k, A, MaxArc], ReNumberR2m[l, A, MaxArc]]}
       /. {X[MaxArc - 3, j_, k_, l_] -> X[1, j, k, l]}
      /. {X[i_, MaxArc - 3, k_, l_] -> X[i, 1, k, l]}
     /. {X[i_, j_, MaxArc - 3, l_] -> X[i, j, 1, l]}
    /. {X[i_, j_, k_, MaxArc - 3] -> X[i, j, k, 1]}
   ];

R2m[K_PD, a_Integer, b_Integer] := 
  If[Abs[a] == 1, R2mOnArc1[K, b], 
   If[Abs[b] == MaxArc[K], R2mOnMaxArc[K, a], R2mGeneric[K, a, b]]];
R3[K_PD, a_Integer, b_Integer, c_Integer] := 
  Module[{A = Abs[a], B = Abs[b], C = Abs[c], Xings, 
    NewXings = PD[X[0, 0, 0, 0], X[0, 0, 0, 0], X[0, 0, 0, 0]]
    },
   Xings = 
    Union[FindCrossingsWith[K, A], FindCrossingsWith[K, B], 
     FindCrossingsWith[K, C]]; 
   Do[NewXings[[i, j]] = 
     If[MemberQ[{A, B, C}, Xings[[i, j]]], 
      Xings[[Friend[Xings, i, j][[1]], 
       Mod[Friend[Xings, i, j][[2]] + 2, 4, 1]]], 
      Xings[[i, Mod[j + 2, 4, 1]]]], {i, 3}, {j, 4}];
    Join[DeleteCases[K, crs_ /; MemberQ[Xings, crs]], NewXings]
   ];
R1pPairs[K_PD] := Module[{list = {}, i},
   For[i = 1, i <= MaxArc[K], i++,
    AppendTo[list, {{i, 1}, {i, 2}, {i, 3}, {i, 4}}];
    ];
   Flatten[list, 1]
   ];

R1pNumber[K_PD] := 4*MaxArc[K];

R1mFaces[K_PD] := 
  If[Fig8Q[K], {}, Cases[Faces[K], face_ /; Length[face] == 1]];

R1mNumber[K_PD] := Length[R1mFaces[K]];

R2pOnSingleArc[K_PD] := Module[{list = {}, i},
   For[i = 1, i <= MaxArc[K], i++,
    AppendTo[list, {i, i}];
    AppendTo[list, {-i, -i}];
    ];
   list
   ];

R2pOnTwoArcs[K_PD] := 
  SortBy[#, Abs] & /@ (Flatten[Subsets[#, {2}] & /@ Faces[K], 1]);

R2pTriples[K_PD] := 
  Join[Append[#, 1] & /@ Join[R2pOnSingleArc[K], R2pOnTwoArcs[K]], 
   Append[#, 2] & /@ Join[R2pOnSingleArc[K], R2pOnTwoArcs[K]]];

R2pPairs[K_PD] := Join[R2pOnSingleArc[K], R2pOnTwoArcs[K]];

R2pNumber[K_PD] := Module[{l = Map[Length, Faces[K]], f},
   f[n_] := 2*(Binomial[n, 2] + n);
   Plus @@ Map[f, l]
   ];

R2mFaces[K_PD] := 
  If[Length[K] == 2, {}, 
   Cases[Faces[K], 
    face_ /; 
     Length[face] == 2 && 
      EvenQ[Position[K, Abs[face[[1]]]][[1, 2]] - 
        Position[K, Abs[face[[1]]]][[2, 
         2]]]]]; (*If the length of the knot is 2 (Zopf shape) then \
either there are no r2m faces or there is one but r2m should not be \
applied to that avoid getting a crossingless circle*)

R2mNumber[K_PD] := Length[R2mFaces[K]];

R3Faces[K_PD] := Cases[Faces[K], face_ /; Length[face] == 3 &&
     Length[
       Union[FindCrossingsWith[K, Abs[face[[1]]]], 
        FindCrossingsWith[K, Abs[face[[2]]]], 
        FindCrossingsWith[K, Abs[face[[3]]]]]] == 
      3 && (EvenQ[
        Position[K, Abs[face[[1]]]][[1, 2]] - 
         Position[K, Abs[face[[1]]]][[2, 2]]] || 
       EvenQ[
        Position[K, Abs[face[[2]]]][[1, 2]] - 
         Position[K, Abs[face[[2]]]][[2, 2]]] || 
       EvenQ[Position[K, Abs[face[[3]]]][[1, 2]] - 
         Position[K, Abs[face[[3]]]][[2, 2]]])];

R3Number[K_PD] := Length[R3Faces[K]];
ReideNumberVector[K_PD] := {R1pNumber[K], R1mNumber[K], R2pNumber[K], 
   R2mNumber[K], R3Number[K]};(*This is not called for now.*)

ReideProbVector[K_PD, beta_Real] := 
  Module[{list = {R1pNumber[K], R1mNumber[K], R2pNumber[K], 
      R2mNumber[K], R3Number[K]},
    weights = {E^(-beta), E^(beta), E^(-2*beta), E^(2*beta), 1}, sum, 
    signlist, wlist},
   signlist = Sign /@ list;
   wlist = signlist*weights;
   sum = Plus @@ wlist;
   wlist = wlist/sum
   ];(*This is not called for now.*)

OneRandomRmove[K_PD, beta_Real] := 
  Module[{r1p = R1pNumber[K], r1m = R1mFaces[K], r2p = R2pPairs[K], 
    r2m = R2mFaces[K], r3 = R3Faces[K], move, list, 
    weights = {E^(-beta), E^(beta), E^(-2*beta), E^(2*beta), 1}, sum, 
    signlist, wlist},
   list = {r1p, Length[r1m], Length[r2p], Length[r2m], Length[r3]};
   signlist = Sign /@ list;
   wlist = signlist*weights;
   sum = Plus @@ wlist;
   wlist = wlist/sum;
   move = RandomChoice[wlist -> {1, 2, 3, 4, 5}];
   Switch[move,
    1, Module[{arc = Random[Integer, {1, MaxArc[K]}], 
      type = Random[Integer, {1, 4}]}, R1p[K, arc, type]],
    2, Module[{face = RandomChoice[r1m]}, R1m[K, Abs[face[[1]]]]],
    3, Module[{pair = RandomChoice[r2p], type = RandomChoice[{1, 2}]},
      R2p[K, pair[[1]], pair[[2]], type]],
    4, Module[{face = RandomChoice[r2m]}, 
     R2m[K, face[[1]], face[[2]]]],
    5, Module[{face = RandomChoice[r3]}, 
     R3[K, face[[1]], face[[2]], face[[3]]]]
    ]
   ];

Randomeister[K_PD, n_Integer, beta_Real] := 
  FoldList[OneRandomRmove, K, ConstantArray[beta, n]];

UnknotSolver[K_PD, beta_Real] := Module[{knot = K},
   While[Length[knot] != 1 && Length[knot] != 2,
    knot = OneRandomRmove[knot, beta];
    Print[Length[knot]];
    ]
   ];
